@page "/admin"
@inject DatabaseService DatabaseService;
@inject ILocalStorageService ls;
@inject NavigationManager NM;

<PageTitle>Administrar fechas</PageTitle>

<div id="contenedor" class="container">
        <div class="col-sm-6 mx-auto">
            <div class="card">
                <div class="card-body text-center">
                    <h1 id="register-page">Panel de administrador</h1>
                    <hr>
                    @if(valid){
                         <div class="alert alert-success">
                            <h1 id="periodo-fecha">¡Actualmente hay periodo de fecha válido!</h1>
                            <p id="date-text">¿Desea modificarlo?</p>
                            <p id="date-text">El periodo actual comienza el @(currentStart.ToString().Split(" ")[0]) y finaliza el @(currentEnd.ToString().Split(" ")[0]).</p>
                            <form @onsubmit="changeCurrentValidTime">
                                <input type="date" placeholder="Ingrese nueva fecha de inicio..." @bind="newCurrentStart">
                                <input type="date" placeholder="Ingrese nueva fecha de fin..." @bind="newCurrentEnd">
                                <br><br>
                                <button type="submit" class="btn btn-primary" id = "date-button">Cambiar</button>
                            </form>
                         </div>
                    }
                    else{
                        <div class="alert alert-danger">
                            <h1 id="periodo-fecha">Actualmente no hay periodo de fecha valido!</h1>
                            @if(DatabaseService.GetLastValidDate() != null){
                                <p id="date-text">El ultimo periodo valido fue desde @(currentStart.ToString().Split(" ")[0]) hasta @(currentEnd.ToString().Split(" ")[0])</p>
                                <p id="date-text">¿Desea modificarlo?</p>
                                <form @onsubmit="changeCurrentValidTime">
                                    <input type="date" placeholder="Ingrese nueva fecha de inicio..." @bind="newCurrentStart">
                                    <input type="date" placeholder="Ingrese nueva fecha de fin..." @bind="newCurrentEnd">
                                    <br><br>
                                    <button type="submit" class="btn btn-primary" >Cambiar</button>
                                </form>
                                
                            }else{
                                <p id="date-text">No hay periodos validos anteriores</p>
                            }
                        </div>
                    }

                    <hr>
                    
                    <div class="alert alert-secondary">
                        <h1 id="periodo-fecha">Crear nuevo periodo de fecha</h1>
                        <p id="date-text">¿Desea crear uno nuevo?</p>
                        <form @onsubmit="changeValidTime">
                            <input type="date" placeholder="Ingrese nueva fecha de inicio..." @bind="start">
                            <input type="date" placeholder="Ingrese nueva fecha de fin..." @bind="end">
                            <br>
                            <br>
                            <button type="submit" class="btn btn-primary" id="date-button">Crear</button>
                        </form>
                    </div>
                    @if(errString != ""){
                        <div class="alert alert-danger">
                            <p>@errString</p>
                        </div>
                    }

                    @if(valid){
                        <hr>
                        <div class="alert alert-info">
                            <h1 id="periodo-fecha">Crear nueva agenda</h1>
                            <form @onsubmit="createNewAgenda">
                                <input type="date" placeholder="Ingrese nueva fecha..." @bind="newAgendaDate">
                                <br>
                                <br>
                                <button type="submit" class="btn btn-primary">Agregar</button>
                            </form>
                        </div>
                    }
                    
                <button type="button" class="btn btn-primary" @onclick="logout">Cerrar sesión</button>
                <button type="button" class="btn btn-primary" @onclick="goReport">Ver reporte</button>
                </div>
            </div>
    </div>
</div>

@code {
    bool valid = false;

    protected override void OnInitialized()
    {
        valid = CheckIfValidTime();

        if(valid){
            currentStart = DatabaseService.GetCurrentStartDate();
            currentEnd = DatabaseService.GetCurrentEndDate();

            if(currentStart != null){
                newCurrentStart = currentStart.Value;
            }

            if(currentEnd != null){
                newCurrentEnd = currentEnd.Value;
            }
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var ci = await ls.GetItemAsync<string>("ci");
        var password = await ls.GetItemAsync<string>("password");

        if(ci == null || password == null){
            NM.NavigateTo("/admin/login");
        }else{
            bool valid = DatabaseService.CheckIfValidAdmin(Int32.Parse(ci), password);
            if(!valid){
                await ls.RemoveItemAsync("ci");
                await ls.RemoveItemAsync("password");
                NM.NavigateTo("/admin/login");
            }
        }
    }
    bool CheckIfValidTime()
    {
        bool valid = DatabaseService.CheckIfValidDate();
        switch(valid){
            case false:
                DateTime? date = DatabaseService.GetCurrentEndDate();
                if(date != null){
                    currentStart = DatabaseService.GetCurrentStartDate();
                    currentEnd = DatabaseService.GetCurrentEndDate();
                }
                return false;
            case true:
                return true;
        }
    }

    DateTime? currentStart;
    DateTime? newCurrentStart;
    DateTime? currentEnd;
    DateTime? newCurrentEnd;

    DateTime? start;
    DateTime? end;

    string errString = "";

    void changeValidTime()
    {
        if(start == null && end == null){
            errString = "Debe ingresar ambas fechas!";
            return;
        }

        if(start == null){
            errString = "Debe ingresar la fecha de inicio!";
            return;
        }

        if(end == null){
            errString = "Debe ingresar la fecha de finalizacion!";
            return;
        }

        if(start > end){
            errString = "La fecha de inicio no puede ser mayor a la de finalizacion!";
            return;
        }

        errString = "";

        if(start != null){
            if (end != null)
            {
                bool st = DatabaseService.AddNewDate(start.Value, end.Value);
                if(st){
                    NM.NavigateTo("/admin/login");
                }
            }
        }
    }

    void changeCurrentValidTime(){
        if(currentStart == null && currentEnd == null){
            errString = "Debe ingresar ambas fechas!";
            return;
        }

        if(currentStart == null){
            errString = "Debe ingresar la fecha de inicio!";
            return;
        }

        if(currentEnd == null){
            errString = "Debe ingresar la fecha de finalizacion!";
            return;
        }

        if(currentStart > currentEnd){
            errString = "La fecha de inicio no puede ser mayor a la de finalizacion!";
            return;
        }

        errString = "";

        if(newCurrentStart != null){
            if (newCurrentEnd != null)
            {
                bool status = DatabaseService.ChangeCurrentDate(currentStart.Value, newCurrentStart.Value, currentEnd.Value, newCurrentEnd.Value);
                if(status){
                    NM.NavigateTo("/admin/login");
                }
            
            }
        }
    }

    DateTime? newAgendaDate;

    void createNewAgenda(){
        Console.WriteLine("New Agenda " + newAgendaDate);


        if(newAgendaDate == null){
            errString = "Debe ingresar una fecha!";
        }

        if(newAgendaDate < DateTime.Now){
            errString = "La fecha no puede ser menor a la actual!";
        }

        errString = "";

        bool status = DatabaseService.AddNewAgendaDate(newAgendaDate.Value);
        if(status){
            NM.NavigateTo("/admin/login");
        }
    }

    void logout()
    {
        ls.RemoveItemAsync("ci");
        ls.RemoveItemAsync("password");
        
        NM.NavigateTo("/admin/login");
    }

    void goReport(){
        NM.NavigateTo("/report");
    }
}